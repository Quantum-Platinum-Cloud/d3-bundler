#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    minimist = require("minimist"),
    rollup = require("rollup");

var polyfill = {
  "requestAnimationFrame":
      'if (typeof requestAnimationFrame === "undefined") {\n' +
      '  requestAnimationFrame = typeof window !== "undefined"\n' +
      '      && (window.msRequestAnimationFrame\n' +
      '      || window.mozRequestAnimationFrame\n' +
      '      || window.webkitRequestAnimationFrame\n' +
      '      || window.oRequestAnimationFrame)\n' +
      '      || function(callback) { setTimeout(callback, 17); };\n' +
      '}\n' +
      '\n',
  "Map":
      'if (typeof Map === "undefined") {\n' +
      '  Map = function() { this.clear(); };\n' +
      '  Map.prototype = {\n' +
      '    set: function(k, v) { this._[k] = v; return this; },\n' +
      '    get: function(k) { return this._[k]; },\n' +
      '    has: function(k) { return k in this._; },\n' +
      '    delete: function(k) { return k in this._ && delete this._[k]; },\n' +
      '    clear: function() { this._ = Object.create(null); },\n' +
      '    get size() { var n = 0; for (var k in this._) ++n; return n; },\n' +
      '    forEach: function(c) { for (var k in this._) c(this._[k], k, this); }\n' +
      '  };\n' +
      '}\n' +
      '\n'
};

var argv = minimist(process.argv.slice(2)),
    entry = argv._[0],
    name = argv.name || "d3",
    format = argv.format || "umd";

rollup.rollup({
  entry: entry,
  resolvePath: function(importee, importer, options) {
    if (/^\./.test(importee)) return path.resolve(path.dirname(importer), importee).replace(/\.js$/, "") + ".js";
    var d = path.join("node_modules", importee);
    if (!fs.existsSync(d)) throw new Error("Missing module '" + importee + "'; required by '" + packageName(importer) + "'.");
    return path.join(d, "index.js");
  }
}).then(function(bundle) {
  if (argv["polyfill"] || argv["polyfill-map"]) process.stdout.write(polyfill.Map);
  if (argv["polyfill"] || argv["polyfill-raf"]) process.stdout.write(polyfill.requestAnimationFrame);
  process.stdout.write(bundle.generate({format: format, moduleName: name}).code);
}).catch(function(error) {
  console.error(error);
});

function packageName(importer) {
  var i = importer.indexOf("/node_modules/");
  if (i < 0) return path.basename(process.cwd());
  var j = importer.indexOf("/", i += 14);
  return importer.slice(i, j);
}
