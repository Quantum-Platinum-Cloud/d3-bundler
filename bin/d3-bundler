#!/usr/bin/env node

var fs = require("fs"),
    path = require("path"),
    minimist = require("minimist"),
    rollup = require("rollup"),
    rollupNpm = require("rollup-plugin-npm");

var argv = minimist(process.argv.slice(2), {
  alias: {
    o: "output",
    f: "format",
    n: "name",
    x: "external"
  },
  default: {
    "output": "-",
    "name": "d3",
    "format": "umd",
    "external": false
  },
  unknown: function() {
    console.warn("Usage: \033[1md3-bundler\033[0m [options] -- [file]");
    process.exit(1);
  }
});

if (!/^[$a-z_][0-9a-z_$]*$/i.test(argv.name)) {
  console.warn("Error: illegal module name \"" + argv.name + "\"");
  process.exit(1);
}

var entry = argv._[0] || "index.js";

rollup.rollup({
  entry: entry,
  external: [ // Squelch the external module warning.
    "d3-arrays",
    "d3-color",
    "d3-dispatch",
    "d3-dsv",
    "d3-ease",
    "d3-format",
    "d3-hierarchy",
    "d3-hull",
    "d3-interpolate",
    "d3-path",
    "d3-polygon",
    "d3-quadtree",
    "d3-random",
    "d3-scale",
    "d3-selection",
    "d3-selection-multi",
    "d3-shape",
    "d3-time",
    "d3-time-format",
    "d3-timer",
    "d3-transition",
    "d3-voronoi",
    "d3-xhr"
  ],
  plugins: argv.external ? [] : [rollupNpm({jsnext: true})]
}).then(function(bundle) {
  var code = bundle.generate({
    format: argv.external ? argv.format : "iife",
    moduleName: argv.external ? argv.name : "exports"
  }).code + "\n";
  if (!argv.external) code = patch(code);
  if (argv.output === "-") process.stdout.write(code);
  else fs.writeFile(argv.output, code, "utf8", done);
}).catch(done);

function patch(code) {
  if (code.slice(0, 37) !== "(function (exports) { 'use strict';\n\n") throw new Error("unexpected output");
  if (outro = code.slice(-26) !== "\n})((this.exports = {}));\n") throw new Error("unexpected output");
  try { var version = require(path.resolve(entry, "../package.json")).version; } catch (ignore) {};
  return "!function(global, exports) {\n"
      + "  \"use strict\";\n"
      + "\n"
      + code.slice(37, -26)
      + (version ? "  exports.version = " + JSON.stringify(version) + ";\n" : "")
      + "\n"
      + "  if (typeof define === \"function\" && define.amd) global." + argv.name + " = exports, define(\"" + argv.name + "\", [], function() { return exports; });\n"
      + "  else if (typeof module === \"object\" && module.exports) module.exports = exports;\n"
      + "  else global." + argv.name + " = exports;\n"
      + "}(this, {});\n";
}

function done(error) {
  if (error) {
    console.error(error);
    process.exit(1);
  }
}
